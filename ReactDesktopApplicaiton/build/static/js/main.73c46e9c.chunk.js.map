{"version":3,"sources":["App.js","serviceWorker.js","index.js","home.svg","settings.svg"],"names":["NanUI","window","App","closeClick","hostWindow","close","onMinimizeClick","minimize","onMaximizeClick","maximize","state","selected","isMaximized","addEventListener","e","detail","code","setState","removeEventListener","title","content","theme","background","this","onSelect","padding","push","icon","renderIcon","name","src","HomeIcon","alt","SettingsIcon","props","height","width","controls","onCloseClick","onRestoreDownClick","renderItem","Component","defaultProps","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"0RAaMA,G,OAAQC,OAAM,OAECC,E,YAKnB,aAAe,IAAD,8BACZ,+CAwDFC,WAAa,WACXH,EAAMI,WAAWC,SA1DL,EA6DdC,gBAAkB,WAChBN,EAAMI,WAAWG,YA9DL,EAiEdC,gBAAkB,WAChBR,EAAMI,WAAWK,YAhEjB,EAAKC,MAAQ,CACXC,SAAU,OACVC,aAAa,GAJH,E,iFAQO,IAAD,OAElBX,OAAOY,iBAAiB,mBAAmB,SAAAC,GACnB,IAAlBA,EAAEC,OAAOC,KACX,EAAKC,SAAS,CACZL,aAAa,IAGf,EAAKK,SAAS,CACZL,aAAa,S,6CAOnBX,OAAOiB,oBAAoB,qB,iCAGlBC,EAAOC,GAAU,IAAD,OACzB,OACE,kBAAC,cAAD,CACED,MAAOA,EACPE,MAAM,QACNC,WAAW,OACXX,SAAUY,KAAKb,MAAMC,WAAaQ,EAClCK,SAAU,kBAAM,EAAKP,SAAS,CAAEN,SAAUQ,KAC1CM,QAAQ,YACRC,MAAM,EACNC,KAAMJ,KAAKK,WAAWT,IAErBC,K,iCAKIS,GACT,OAAQA,GACN,IAAK,OACH,OAAO,yBAAKC,IAAKC,IAAUC,IAAI,SACjC,IAAK,WACH,OAAO,yBAAKF,IAAKG,IAAcD,IAAI,aAKvC,OAAO,O,+BAgBP,OACE,kBAAC,SAAD,CAAQX,MAAOE,KAAKW,MAAMb,MAAOc,OAAO,OAAOC,MAAM,QACnD,kBAAC,WAAD,CACEjB,MAAM,oBACNkB,UAAU,EACVC,aAAcf,KAAKpB,WACnBG,gBAAiBiB,KAAKjB,gBACtBE,gBAAiBe,KAAKf,gBACtB+B,mBAAoBhB,KAAKf,gBACzBI,YAAaW,KAAKb,MAAME,cAE1B,kBAAC,UAAD,KACGW,KAAKiB,WAAW,OAAQ,kBAAC,OAAD,0BACxBjB,KAAKiB,WAAW,WAAY,kBAAC,OAAD,8B,GAxFNC,aAAZvC,EACZwC,aAAe,CACpBrB,MAAO,SCLSsB,QACW,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBErInBC,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.73c46e9c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Window,\n  TitleBar,\n  NavPane,\n  NavPaneItem,\n  Text\n} from \"react-desktop/windows\";\n\nimport HomeIcon from \"./home.svg\";\nimport SettingsIcon from \"./settings.svg\";\nimport \"./App.css\";\n\nconst NanUI = window[\"NanUI\"];\n\nexport default class App extends Component {\n  static defaultProps = {\n    theme: \"light\"\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      selected: \"Home\",\n      isMaximized: false\n    };\n  }\n\n  componentDidMount() {\n    // hoststatechange is a custom event by NanUI\n    window.addEventListener(\"hoststatechange\", e => {\n      if (e.detail.code === 2) {\n        this.setState({\n          isMaximized: true\n        });\n      } else {\n        this.setState({\n          isMaximized: false\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"hoststatechange\");\n  }\n\n  renderItem(title, content) {\n    return (\n      <NavPaneItem\n        title={title}\n        theme=\"light\"\n        background=\"#fff\"\n        selected={this.state.selected === title}\n        onSelect={() => this.setState({ selected: title })}\n        padding=\"10px 20px\"\n        push={true}\n        icon={this.renderIcon(title)}\n      >\n        {content}\n      </NavPaneItem>\n    );\n  }\n\n  renderIcon(name) {\n    switch (name) {\n      case \"Home\":\n        return <img src={HomeIcon} alt=\"Home\" />;\n      case \"Settings\":\n        return <img src={SettingsIcon} alt=\"Settings\" />;\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  closeClick = () => {\n    NanUI.hostWindow.close();\n  };\n\n  onMinimizeClick = () => {\n    NanUI.hostWindow.minimize();\n  };\n\n  onMaximizeClick = () => {\n    NanUI.hostWindow.maximize();\n  };\n\n  render() {\n    return (\n      <Window theme={this.props.theme} height=\"100%\" width=\"100%\">\n        <TitleBar\n          title=\"NanUI Application\"\n          controls={true}\n          onCloseClick={this.closeClick}\n          onMinimizeClick={this.onMinimizeClick}\n          onMaximizeClick={this.onMaximizeClick}\n          onRestoreDownClick={this.onMaximizeClick}\n          isMaximized={this.state.isMaximized}\n        ></TitleBar>\n        <NavPane>\n          {this.renderItem(\"Home\", <Text>Welcome to NanUI</Text>)}\n          {this.renderItem(\"Settings\", <Text>Settings here.</Text>)}\n        </NavPane>\n      </Window>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/home.28606014.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.23bff062.svg\";"],"sourceRoot":""}